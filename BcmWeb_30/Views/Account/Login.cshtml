@using BcmWeb_30.Models
@model LoginModel

<script type="text/javascript">
    function convert(value) {
        var hours = parseInt(value);
        value -= parseInt(value);
        value *= 60;
        var mins = parseInt(value);
        value -= parseInt(value);
        value *= 60;
        var secs = parseInt(value);
        var display_hours = hours;
        var display_mins = mins;
        // handle GMT case (00:00)
        if (hours == 0) {
            display_hours = "00";
        } else if (hours > 0) {
            // add a plus sign and perhaps an extra 0
            display_hours = (hours < 10) ? "+0" + hours : "+" + hours;
        } else {
            // add an extra 0 if needed
            display_hours = (hours > -10) ? "-0" + Math.abs(hours) : hours;
        }
        if (mins == 0) {
            display_mins = "00";
        } else if (mins > 0) {
            // add a plus sign and perhaps an extra 0
            display_mins = (mins < 10) ? "+0" + mins : "+" + mins;
        } else {
            // add an extra 0 if needed
            display_mins = (mins > -10) ? "-0" + Math.abs(mins) : mins;
        }

        return display_hours + ":" + display_mins;
    }
    $(document).ready(function () {
        var minutes;
        var rightNow = new Date();
        var jan1 = new Date(rightNow.getFullYear(), 0, 1, 0, 0, 0, 0);  // jan 1st
        var june1 = new Date(rightNow.getFullYear(), 6, 1, 0, 0, 0, 0); // june 1st
        var temp = jan1.toGMTString();
        var jan2 = new Date(temp.substring(0, temp.lastIndexOf(" ") - 1));
        temp = june1.toGMTString();
        var june2 = new Date(temp.substring(0, temp.lastIndexOf(" ") - 1));
        var std_time_offset = (jan1 - jan2) / (1000 * 60 * 60);
        var daylight_time_offset = (june1 - june2) / (1000 * 60 * 60);
        var dst;
        if (std_time_offset == daylight_time_offset) {
            dst = "0"; // daylight savings time is NOT observed
        } else {
            // positive is southern, negative is northern hemisphere
            var hemisphere = std_time_offset - daylight_time_offset;
            if (hemisphere >= 0)
                std_time_offset = daylight_time_offset;
            dst = "1"; // daylight savings time is observed
        }
        var i;
        // Here set the value of hidden field to the ClientTimeZone.
        minutes = convert(std_time_offset);
        $('#UserTimezone').val(minutes);
    });

    function OnClick(s, e) {
        if ($("#editForm").valid() && $("#IsValid").val() == 'true') {
            lp.Show();
        };
    }
</script>

<div class="loginPage">
    <div class="accountHeader">
        <h2>@Resources.LoginResource.accountHeader</h2>
        <p>
            @Resources.LoginResource.loginTextoLinea1
        </p>
        <p style="color:red">@ViewBag.ErrorMessage</p>
    </div>
    @using (Html.BeginForm("Login", "Account", FormMethod.Post, htmlAttributes: new { id = "editForm" }))
        {
        @Html.AntiForgeryToken()
        @Html.Hidden("IsValid", ViewData.ModelState.IsValid.ToString().ToLower())
        @Html.HiddenFor(m => m.UserTimezone)

        @Html.DevExpress().TextBoxFor(m => m.UserName, tb =>
                {
                    tb.Width = Unit.Percentage(100);
                    tb.Properties.Caption = Resources.LoginResource.captionUsername;
                    tb.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
                    tb.ShowModelErrors = true;
                    tb.Properties.HelpText = Resources.LoginResource.helpTextEmail;
                    tb.Properties.HelpTextSettings.Position = HelpTextPosition.Bottom;
                    tb.Properties.ValidationSettings.Display = Display.Dynamic;
                    tb.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                }).GetHtml()

        @Html.DevExpress().TextBoxFor(m => m.Password, tb =>
                {
                    tb.Width = Unit.Percentage(100);
                    tb.ShowModelErrors = true;
                    tb.Properties.Caption = Resources.LoginResource.captionPassword;
                    tb.Properties.HelpText = Resources.LoginResource.helpTextPassword;
                    tb.Properties.HelpTextSettings.Position = HelpTextPosition.Bottom;
                    tb.Properties.Password = true;
                    tb.Properties.CaptionSettings.Position = EditorCaptionPosition.Top;
                    tb.Properties.ValidationSettings.Display = Display.Dynamic;
                    tb.Properties.ValidationSettings.ErrorDisplayMode = ErrorDisplayMode.ImageWithTooltip;
                }).GetHtml()

        <br />
        <div style="float:left; position: relative;">
            @Html.ActionLink(Resources.ForgotPasswordResource.HeaderString, "ForgotPasword", "Account")
        </div>
        <div class="right">
            @Html.DevExpress().Button(b =>
                    {
                        b.Name = "botLogin";
                        b.Text = Resources.LoginResource.botLoginText;
                        b.ClientSideEvents.Click = "OnClick";
                        b.UseSubmitBehavior = true;
                    }).GetHtml()
        </div>
        }
</div>
