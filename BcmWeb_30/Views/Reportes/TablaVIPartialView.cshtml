@using BcmWeb_30

@model List<objCantidadVI>

@Html.DevExpress().GridView(
settings =>
{
    settings.Name = "gvVI";
    settings.CallbackRouteValues = new { Controller = "Reportes", Action = "TablaVIPartialView" };

    settings.Width = System.Web.UI.WebControls.Unit.Percentage(100);
    settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
    settings.ControlStyle.Paddings.Padding = System.Web.UI.WebControls.Unit.Pixel(0);
    settings.ControlStyle.Border.BorderWidth = System.Web.UI.WebControls.Unit.Pixel(0);
    settings.ControlStyle.BorderBottom.BorderWidth = System.Web.UI.WebControls.Unit.Pixel(1);
    settings.SettingsLoadingPanel.Mode = GridViewLoadingPanelMode.Disabled;
    settings.ClientSideEvents.BeginCallback = "function (s,e) { lp.Show(); }";
    settings.ClientSideEvents.EndCallback = "function (s,e) { lp.Hide(); }";

    settings.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
    settings.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
    settings.Settings.VerticalScrollableHeight = 400;
    settings.Width = Unit.Percentage(100);

    settings.SettingsPager.PageSize = 20;
    settings.SettingsPager.Position = PagerPosition.Bottom;
    settings.SettingsPager.FirstPageButton.Visible = true;
    settings.SettingsPager.LastPageButton.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Visible = true;
    settings.SettingsPager.PageSizeItemSettings.Items = new string[] { "10", "20", "50", "100" };

    settings.SettingsAdaptivity.AdaptivityMode = GridViewAdaptivityMode.HideDataCells;
    settings.SettingsAdaptivity.AllowOnlyOneAdaptiveDetailExpanded = true;
    settings.EditFormLayoutProperties.SettingsAdaptivity.AdaptivityMode = FormLayoutAdaptivityMode.SingleColumnWindowLimit;
    settings.EditFormLayoutProperties.SettingsAdaptivity.SwitchToSingleColumnAtWindowInnerWidth = 600;

    settings.Columns.Add(c =>
    {
        c.Settings.AllowSort = DefaultBoolean.True;
        c.FieldName = "Unidad";
        c.Caption = Resources.ReporteResource.captionUnidad;
        c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
        c.CellStyle.Wrap = DefaultBoolean.True;
        c.PropertiesEdit.DisplayFormatString = "{0}";
        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        c.HeaderStyle.VerticalAlign = VerticalAlign.Middle;
        c.HeaderStyle.Wrap = DefaultBoolean.True;
    });
    settings.Columns.AddBand(sb =>
    {
        sb.Caption = Resources.ReporteResource.captionMDTHeader;
        sb.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        int iMTD = 0;
        foreach (string Valor in BcmWeb_30.Metodos.GetDescripcionEscala(eTipoEscala.MTD))
        {
            sb.Columns.Add(c =>
            {
                c.Settings.AllowSort = DefaultBoolean.True;
                c.FieldName = "MTDUnbound" + iMTD.ToString();
                c.UnboundType = DevExpress.Data.UnboundColumnType.String;
                c.Caption = Valor.ToString();
                c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.HeaderStyle.VerticalAlign = VerticalAlign.Middle;
                c.HeaderStyle.Wrap = DefaultBoolean.True;
            });
            iMTD++;
        }
    });
    settings.Columns.AddBand(sb =>
    {
        sb.Caption = Resources.ReporteResource.captionRPOHeader;
        sb.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        int iRPO = 0;
        foreach (string Valor in BcmWeb_30.Metodos.GetDescripcionEscala(eTipoEscala.RPO))
        {
            sb.Columns.Add(c =>
            {
                c.Settings.AllowSort = DefaultBoolean.True;
                c.FieldName = "RPOUnbound" + iRPO.ToString();
                c.UnboundType = DevExpress.Data.UnboundColumnType.String;
                c.Caption = Valor.ToString();
                c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.HeaderStyle.VerticalAlign = VerticalAlign.Middle;
                c.HeaderStyle.Wrap = DefaultBoolean.True;
            });
            iRPO++;
        }
    });
    settings.Columns.AddBand(sb =>
    {
        sb.Caption = Resources.ReporteResource.captionRTOHeader;
        sb.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        int iRTO = 0;
        foreach (string Valor in BcmWeb_30.Metodos.GetDescripcionEscala(eTipoEscala.RTO))
        {
            sb.Columns.Add(c =>
            {
                c.Settings.AllowSort = DefaultBoolean.True;
                c.FieldName = "RTOUnbound" + iRTO.ToString();
                c.UnboundType = DevExpress.Data.UnboundColumnType.String;
                c.Caption = Valor.ToString();
                c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.HeaderStyle.VerticalAlign = VerticalAlign.Middle;
                c.HeaderStyle.Wrap = DefaultBoolean.True;
            });
            iRTO++;
        }
    });
    settings.Columns.AddBand(sb =>
    {
        sb.Caption = Resources.ReporteResource.captionWRTHeader;
        sb.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
        int iWRT = 0;
        foreach (string Valor in BcmWeb_30.Metodos.GetDescripcionEscala(eTipoEscala.WRT))
        {
            sb.Columns.Add(c =>
            {
                c.Settings.AllowSort = DefaultBoolean.True;
                c.FieldName = "WRTUnbound" + iWRT.ToString();
                c.UnboundType = DevExpress.Data.UnboundColumnType.String;
                c.Caption = Valor.ToString();
                c.CellStyle.HorizontalAlign = HorizontalAlign.Center;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.HeaderStyle.VerticalAlign = VerticalAlign.Middle;
                c.HeaderStyle.Wrap = DefaultBoolean.True;
            });
            iWRT++;
        }
    });

    settings.CustomUnboundColumnData = (s, e) =>
    {
        if (e.Column.FieldName.Contains("MTDUnbound"))
        {
            var valores = e.GetListSourceFieldValue("ValoresMTD") as List<Int32>;
            int res = 0;
            if (valores != null)
            {
                var ColName = e.Column.FieldName;
                int index = int.Parse(e.Column.FieldName.Replace("MTDUnbound", ""));
                res = valores[index];
            }
            e.Value = res;
        }
        if (e.Column.FieldName.Contains("RPOUnbound"))
        {
            var valores = e.GetListSourceFieldValue("ValoresRPO") as List<Int32>;
            int res = 0;
            if (valores != null)
            {
                var ColName = e.Column.FieldName;
                int index = int.Parse(e.Column.FieldName.Replace("RPOUnbound", ""));
                res = valores[index];
            }
            e.Value = res;
        }
        if (e.Column.FieldName.Contains("RTOUnbound"))
        {
            var valores = e.GetListSourceFieldValue("ValoresRTO") as List<Int32>;
            int res = 0;
            if (valores != null)
            {
                var ColName = e.Column.FieldName;
                int index = int.Parse(e.Column.FieldName.Replace("RTOUnbound", ""));
                res = valores[index];
            }
            e.Value = res;
        }
        if (e.Column.FieldName.Contains("WRTUnbound"))
        {
            var valores = e.GetListSourceFieldValue("ValoresWRT") as List<Int32>;
            int res = 0;
            if (valores != null)
            {
                var ColName = e.Column.FieldName;
                int index = int.Parse(e.Column.FieldName.Replace("WRTUnbound", ""));
                res = valores[index];
            }
            e.Value = res;
        }
    };
}).Bind(Model).GetHtml()

