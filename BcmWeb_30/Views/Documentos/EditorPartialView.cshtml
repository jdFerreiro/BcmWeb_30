@using DevExpress.XtraRichEdit

@{ 
    var rich = Html.DevExpress().RichEdit(settings =>
    {
        settings.Name = "RichEdit";
        settings.CallbackRouteValues = new { Controller = "Documentos", Action = "EditorPartialView" };

        settings.Width = Unit.Percentage(100);
        settings.Height = Unit.Pixel(520);
        settings.ShowConfirmOnLosingChanges = false;
        settings.ActiveTabIndex = 0;

        settings.ShowStatusBar = false;
        settings.ReadOnly = !((bool)Session["Editable"]);

        settings.Settings.DocumentCapabilities.HeadersFooters = DocumentCapability.Enabled;
        settings.RibbonMode = RichEditRibbonMode.Ribbon;
        settings.EnableClientSideAPI = true;
        settings.SettingsDocumentSelector.UploadSettings.Enabled = true;
        settings.ClientSideEvents.CustomCommandExecuted = "OnCustomCommandExecuted";
        settings.ClientSideEvents.DocumentChanged = "docChange";
        if (settings.RibbonTabs.Find(r => r is DevExpress.Web.ASPxRichEdit.RERTableDesignTab) != null)
            settings.RibbonTabs.Find(r => r is DevExpress.Web.ASPxRichEdit.RERTableDesignTab).Text = Resources.EditorResources.RibbonDesignTab;
        if (settings.RibbonTabs.Find(r => r is DevExpress.Web.ASPxRichEdit.RERTableLayoutTab) != null)
            settings.RibbonTabs.Find(r => r is DevExpress.Web.ASPxRichEdit.RERTableLayoutTab).Text = Resources.EditorResources.RibbonLayoutTab;

        settings.CustomActionRouteValues = new { Controller = "Documentos", Action = "Open" };

        settings.PreRender = (s, e) =>
        {
            MVCxRichEdit richEdit = (MVCxRichEdit)s;
            richEdit.CreateDefaultRibbonTabs(false);

            richEdit.BackColor = System.Drawing.Color.White;

            //Custom Open button
            richEdit.RibbonTabs[0].Groups[0].Items.RemoveAll(x => x is RERNewCommand);
            richEdit.RibbonTabs[0].Groups[0].Items.RemoveAll(x => x is REROpenCommand);
            richEdit.RibbonTabs[0].Groups[0].Items.RemoveAll(x => x is RERSaveAsCommand);
            richEdit.RibbonTabs[0].Groups[0].Items.RemoveAll(x => x is RERSaveCommand);

            richEdit.RibbonTabs[0].Groups[0].Items.Insert(1, new RibbonButtonItem
            {
                ClientEnabled = (bool)Session["Editable"],
                LargeImage = { IconID = IconID.ActionsOpen32x32 },
                Name = "open",
                Size = RibbonItemSize.Large,
                Text = Resources.EditorResources.OpenCustomText,
            });
            richEdit.RibbonTabs[0].Groups[0].Items.Insert(1, new RibbonButtonItem
            {
                ClientEnabled = false,
                Name = "botSave",
                LargeImage = { IconID = IconID.ActionsSave32x32devav },
                Size = RibbonItemSize.Large,
                Text = Resources.EditorResources.SaveCustomText,
            });

            richEdit.Focus();
        };
    });
    if (string.IsNullOrEmpty(Session["Contenido"].ToString()))
    {
        rich.GetHtml();
    }
    else
    {
        rich.Open((string)Session["UniqueId"], DocumentFormat.OpenXml, () =>
        {
            return (Convert.FromBase64String(Session["Contenido"].ToString()));
        }).GetHtml();
    }
}