<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="BCPTituloString" xml:space="preserve">
    <value>Procedimientos de Continuidad</value>
  </data>
  <data name="BIATituloString" xml:space="preserve">
    <value>Análisis de Impacto</value>
  </data>
  <data name="ETCTituloString" xml:space="preserve">
    <value>Estructura de Continuidad</value>
  </data>
  <data name="ETGTituloString" xml:space="preserve">
    <value>Estrategias de Continuidad</value>
  </data>
  <data name="FechaHeaderString" xml:space="preserve">
    <value>Fecha: {0}</value>
  </data>
  <data name="FooterStringLinea1" xml:space="preserve">
    <value>Grupo Aplired, C.A., Torre Morelos, Piso 4, ofc.4-B, Quebrada Honda, La Candelaria, Caracas – Venezuela</value>
  </data>
  <data name="FooterStringLinea2" xml:space="preserve">
    <value>Telefax: (58 212) 578.4565,  website: www.aplired.com,  e-mail: aplired@aplired.com</value>
  </data>
  <data name="PADTituloString" xml:space="preserve">
    <value>Plan de Adiestramiento</value>
  </data>
  <data name="PaginaHeaderString" xml:space="preserve">
    <value>Pág. {0}</value>
  </data>
  <data name="PLCTituloString" xml:space="preserve">
    <value>Políticas de Continuidad</value>
  </data>
  <data name="PMITituloString" xml:space="preserve">
    <value>Plan de Manejo de Incidentes</value>
  </data>
  <data name="PMTTituloString" xml:space="preserve">
    <value>Plan de Mantenimiento</value>
  </data>
  <data name="PPETituloString" xml:space="preserve">
    <value>Plan para Pruebas y Ejercicios</value>
  </data>
  <data name="RSGTituloString" xml:space="preserve">
    <value>Análisis de Riesgo</value>
  </data>
  <data name="TítuloDocumento" xml:space="preserve">
    <value>Plan de Continuidad del Negocio</value>
  </data>
  <data name="USRTituloString" xml:space="preserve">
    <value>Relación de Usuarios</value>
  </data>
  <data name="BotonGenerarPDFString" xml:space="preserve">
    <value>Generar PDF</value>
  </data>
  <data name="ViewParrafo1" xml:space="preserve">
    <value>Ésta opción permite generar el documento en formato PDF .</value>
  </data>
  <data name="ViewParrafo2" xml:space="preserve">
    <value>El documento resultante en PDF, podrá ser consultado por las personas autorizadas, desde la aplicación. En el caso de que el documento se encuentre certificado, podrá ser visto desde los dispositivos móviles, por aquellos usuarios con acceso permitido para el módulo.</value>
  </data>
  <data name="ViewParrafo3" xml:space="preserve">
    <value>El documento puede ser generado las veces que lo considere necesario. No se guardarán versiones de los documentos en formato PDF y siempre estará disponible el último documento generado. Para generar el documento, deberá presionar el botón que se encuentra en la parte inferior derecha de la pantalla identidicado como {0}.</value>
  </data>
  <data name="ViewParrafo4" xml:space="preserve">
    <value>Una vez finalizada la generación del documento, se abrirá una nueva ventana que le permitirá ver el documento resultante.</value>
  </data>
  <data name="ViewParrafo5" xml:space="preserve">
    <value>En caso de que la ventana nueva no aparezca, verifique que su explorador permite la apertura de ventanas emergentes desde este sitio web.</value>
  </data>
  <data name="CeldaCapituloHeader" xml:space="preserve">
    <value>Capítulo</value>
  </data>
  <data name="CeldaPaginaHeader" xml:space="preserve">
    <value>Página</value>
  </data>
  <data name="ContenidoTituloString" xml:space="preserve">
    <value>Contenido</value>
  </data>
  <data name="PTITituloString" xml:space="preserve">
    <value>Plan de Trabajo</value>
  </data>
  <data name="INCTituloString" xml:space="preserve">
    <value>Incidentes Experimentados</value>
  </data>
</root>